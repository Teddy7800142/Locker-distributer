// Lots of unorganized comments for myself, mixed in with decent ones...

// Utility function to generate a range of numbers (for lockers)
function generateRange(start, end) {
  return Array.from({ length: end - start + 1 }, (_, i) => start + i);
}

// Locker bank map for each homeroom (array for each homerooom)
const homeroomLockerMap = { 
    // Upstairs Math Hall (AREA 1) (Areas subject to be changed)
  "217": generateRange(523, 535),
  "218_220": generateRange(537, 577),
  "221": generateRange(578, 605),
  "211": [...generateRange(606, 609), ...generateRange(874, 914)],
  // "..." indicates spread operator (two separate ranges of locker numbers being combined for specific homerooms)
  "228": generateRange(610, 641),
  "211_212": generateRange(874, 914),
  "213_214": generateRange(915, 955),
  "215": generateRange(957, 969),
  // # of lockers = 245
  
  // Upstairs Sci Hall (AREA 2)
  "229_230": generateRange(642, 689),
  "231_232": generateRange(690, 743),
  "201": [...generateRange(744, 754), ...generateRange(755, 773)],
  "202": generateRange(774, 793),
  "204": generateRange(794, 814),
  "205": generateRange(815, 835),
  "207": generateRange(836, 856),
  "208": generateRange(857, 873),
  // # of lockers = 223
  
  // Downstairs Language Hall (AREA 3)
  "112": [...generateRange(1057, 1082), ...generateRange(1305, 1348)],
  "113": generateRange(1083, 1112),
  "114_115": generateRange(1113, 1178),
  "116": generateRange(1179, 1204),
  "117": generateRange(1205, 1246),
  "119": generateRange(1247, 1276),
  "120": generateRange(1277, 1304),
  "121": [...generateRange(1349, 1388), ...generateRange(1393, 1430)],
  // # of lockers = 360
  
  
  // Downstairs Tech/Art Hall (AREA 4)
  "129": generateRange(1431, 1524),
  "126": [...generateRange(1525, 1602), ...generateRange(1629, 1670)],
  "122": generateRange(1603, 1628),
  "130": generateRange(1671, 1692),
  "132": generateRange(1693, 1784),
  "ChiefsOffice": generateRange(1785, 1824),
  "Caf": generateRange(1825, 1840),
  "Receiving": generateRange(1841, 1890),
  // # of lockers = 451
  
  // Downstairs & Upstairs New Wing (AREA 5)
  "162": generateRange(2000, 2041),
  "162_163": generateRange(2042, 2052),
  "163": [...generateRange(2053, 2075), ...generateRange(2076, 2097)],
  "166": [...generateRange(2098, 2125), ...generateRange(2126, 2149)],
  "167": [...generateRange(2150, 2153), ...generateRange(2154, 2158)],
  "168": generateRange(2159, 2176),
  "169": generateRange(2177, 2195),
  "172": generateRange(2196, 2200),
  "171": generateRange(2201, 2212),
  "253": [...generateRange(2213, 2224), ...generateRange(2225, 2231)],
  "252": [...generateRange(2232, 2254), ...generateRange(2255, 2259)],
  "251": [...generateRange(2260, 2277), ...generateRange(2278, 2282)],
  "250": generateRange(2283, 2299)
  // # of lockers = 281
  
  
};

const areaMap = {
  // AREA 1 – Upstairs Math Hall
  "217": 1,
  "218_220": 1,
  "221": 1,
  "211": 1,
  "228": 1,
  "211_212": 1,
  "213_214": 1,
  "215": 1,

  // AREA 2 – Upstairs Sci Hall
  "229_230": 2,
  "231_232": 2,
  "201": 2,
  "202": 2,
  "204": 2,
  "205": 2,
  "207": 2,
  "208": 2,

  // AREA 3 – Downstairs Language Hall
  "112": 3,
  "113": 3,
  "114_115": 3,
  "116": 3,
  "117": 3,
  "119": 3,
  "120": 3,
  "121": 3,

  // AREA 4 – Downstairs Tech/Art Hall
  "129": 4,
  "126": 4,
  "122": 4,
  "130": 4,
  "132": 4,
  "ChiefsOffice": 4,
  "Caf": 4,
  "Receiving": 4,

  // AREA 5 – New Wing Downstairs & Upstairs
  "162": 5,
  "162_163": 5,
  "163": 5,
  "166": 5,
  "167": 5,
  "168": 5,
  "169": 5,
  "172": 5,
  "171": 5,
  "253": 5,
  "252": 5,
  "251": 5,
  "250": 5
};

// Example student list (array with student info to differenciate them)
const students = [
  { firstName: "Auston", lastName: "Matthews", homeroom: "163" },
  { firstName: "Mitch", lastName: "Marner", homeroom: "163" },
  { firstName: "William", lastName: "Nylander", homeroom: "162" },
  { firstName: "John", lastName: "Tavares", homeroom: "162" },
  { firstName: "Matthew", lastName: "Knies", homeroom: "217" },
  { firstName: "Max", lastName: "Domi", homeroom: "217" },
  { firstName: "Max", lastName: "Pacioretty", homeroom: "168" },
  { firstName: "a", lastName: "b", homeroom: "172" },
  { firstName: "a", lastName: "b", homeroom: "172" },
  { firstName: "a", lastName: "b", homeroom: "172" },
  { firstName: "a", lastName: "b", homeroom: "172" }
  
  
  
  // when it overflows right now, it causes no students to be assigned to that specific homeroom
  // instead, it should pick a locker somewhat nearby (maybe divide the lockers into sub areas
  // this way, the lockers are somewhat close to each other
  // then it picks a random homeroom and assigns the remaining lockers there
  // once that fills up, go to the next homeroom and assign all of them there (better alternative?)
 
  // also consider portable homerooms (get a list of all unique homerooms please)
  // then i will be able to mark all the empty homerooms too
  // make sure to keep the comments
  
  
  
  // it also assigns all lockers at the same time, but there should be a hierachy
  // senior grades, special ed, coop/tech students, upper lockers before lower ones
  // lockers treated as two may need to just be switched to one (162_163)
  // also every other locker needs to be the same (html problem ig)
  // include comments that explain js syntax, logic, or concepts themselves, as this is new for us
  
  // after these, the csv function of david's can be added
  // this way, student info can only be added by csv or assign range feature (to be added)
  
  
  /* Ideal Checklist:
   * 1. Empty lists in the correct areas
   * 2. When it overflows, it picks a new random area and fills out a homeroom...
   * 3. Alphabetical 
   * 4. Order  
   *    senior grades, special ed, coop/tech students, upper lockers before lower ones (every other locker in certain locker ranges)
   *    5. The exact name of homerooms are cooked (cross reference the sheets)
   */
];

/*
 * GENERAL INFO FROM SPREADSHEET (do all portables even have classes)?
 * P1 = DNE
 * P2 = completely random ngl
 * P3 = 132
 * P4 = 112 (across)
 * P5 = 105 (outside)
 * P6 = DNE
 * P7 = DNE 
 * P8 = DNE
 * P9 = DNE
 * P10 = 163 (outside and across)
 * P11 = DNE
 * P12 = 232
 * P13 = 126 (outside and every other) and 105 (outside and every other)
 * P14 = 132 (outside and every other/not??) and chief's office
 * P15 = 132 (outside)
 * P16 = DNE
 * Dance = 162 (across)
 * Gym B = 162 (across) and 162_163 and 163 (outside)
 */

// Function to assign lockers to students based on their homeroom
function assignLockers() { // Creates an empty object to store students by their homeroom 
  const studentsByHomeroom = {};

  // Loop through the students array (eventually csv at some point)
  // Each student object is expected to have the properties first name, last name, homeroom
  // Objects in JS consist of KEYS (properties) that are linked with a VALUE of any data type. 
  // They are generally useful for created structured data. In this case, we have the homerooms linked with student info
  students.forEach(student => { // Check if the student's homeroom doesn't yet exist as a key in the studentsByHomeroom object
    if (!studentsByHomeroom[student.homeroom]) { // If the homeroom key doesn't exist, create an empty array to store students in that homeroom
      studentsByHomeroom[student.homeroom] = [];
    }
    studentsByHomeroom[student.homeroom].push(student); // Add the current student to the end of the array for their homeroom (push method)
  });

  const assignedLockers = []; // Creates an empty array to store the final locker assignments (inputed student details and assigned locker #)
  Object.entries(studentsByHomeroom).forEach(([homeroom, studentList]) => { // Object.entries converts the object into an array of keys and values, where key = homeroom and value = array of students in specific homeroom
    // Loop through each homeroom and its list of students to get the list of available lockers for this homeroom from homeroomLockerMap
    const availableLockers = homeroomLockerMap[homeroom];
    
    // Ensure availableLockers exists (is not undefined) and has enough lockers by comparing # of lockers to # of students in the homeroom
    if (availableLockers && availableLockers.length >= studentList.length) {
      // If there are enough lockers, loop through each student in the homeroom
      studentList.forEach((student, index) => {
        // Create a new object for the locker assignment
        // Use the spread operator (... from earlier) to copy all properties from the student object
        // (like firstName, lastName, homeroom) and add a new 'locker' property
        // The locker number is taken from availableLockers at the current index
        // This ensures each student gets a unique locker from the available list
        assignedLockers.push({
          ...student,
          locker: availableLockers[index]
        });
      });
    } else {
      // If there aren't enough lockers (or availableLockers is undefined)
      console.warn(`Not enough lockers for homeroom ${homeroom}`);
    }
  });

  // Call the displayAssignedLockers function to show the locker assignments in the HTML table
  // Pass the assignedLockers array, which contains all students with their assigned lockers
  displayAssignedLockers(assignedLockers);
}

// Function to display locker assignments by takeing an array of assignment objects, where each object contains student details:
// (firstName, lastName, homeroom) and their assigned locker number
function displayAssignedLockers(assignments) {
  const tableBody = document.querySelector('#lockerTable tbody');
  tableBody.innerHTML = ''; // Clear existing rows

  assignments.forEach(assignment => {
    const row = document.createElement('tr');
    row.innerHTML = `
      <td>${assignment.firstName}</td>
      <td>${assignment.lastName}</td>
      <td>${assignment.homeroom}</td>
      <td>${assignment.locker}</td>
    `;
    tableBody.appendChild(row);
  });
}
// Mostly html table code from StackOverflow for testing purposes

/*
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Locker Assignment</title>
  <style>
    body {
      font-family: Arial, sans-serif;
      margin: 20px;
    }
    h1 {
      color: #2C3E50;
    }
    table {
      width: 100%;
      border-collapse: collapse;
      margin-top: 20px;
    }
    table, th, td {
      border: 1px solid #ccc;
    }
    th, td {
      padding: 8px 12px;
      text-align: left;
    }
    th {
      background-color: #f4f4f4;
    }
  </style>
</head>
<body>
  <h1>Locker Assignment for Students</h1>
  <button onclick="assignLockers()">Assign Lockers</button>
  
  <table id="lockerTable">
    <thead>
      <tr>
        <th>First Name</th>
        <th>Last Name</th>
        <th>Homeroom</th>
        <th>Assigned Locker</th>
      </tr>
    </thead>
    <tbody>
      <!-- Locker assignments will go here -->
    </tbody>
  </table>

  <!-- Link to external JavaScript file -->
  <script src="script.js"></script>
</body>
</html>
*/
